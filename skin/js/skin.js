// Skin specific Javascript
if ("scImageMgr" in window) scImageMgr.fOverAlpha = .9;


// const menuLabelsElementss = document.querySelectorAll(".default #menu .mnu .lbl")
const menuLabelsElementss = document.querySelectorAll(".default #menu .mnu .item")

let menuLabelsElements = [...menuLabelsElementss]


// Adds and removes the text color when hovering on every menu item's div
menuLabelsElements.forEach(menuLabelEl => {
	menuLabelEl.addEventListener('mouseenter', (e) => {
		// console.log(menuLabelEl.innerText)
		// console.log("mouseenter over a label element")
		const childrenList = e.target.children
		// console.log(childrenList)
		const spanChild = childrenList[childrenList.length - 1]
		// console.log("Span child: " + spanChild)

		spanChild.style.color = "white"

	})
})

menuLabelsElements.forEach(menuLabelEl => {
	menuLabelEl.addEventListener('mouseleave', (e) => {
		const childrenList = e.target.children

		const spanChild = childrenList[childrenList.length - 1]

		const selectedParent = spanChild.parentElement.parentElement.parentElement

		const isParentActive = selectedParent.classList.contains("sel_yes")
		
		// Only re-sets the text color to dark if the menu item is not currently active
		if (!isParentActive) {
		spanChild.style.color = "var(--text-color)"
		}
	})
})

// <a> element
const bottomNavPrev = document.querySelector(".btnNav.prev")

const bottomNavNext = document.querySelector(".btnNav.next")

let prevIcon = document.createElement("img")
prevIcon.src = "../skin/img/tpl/new/chevron-left.svg"
prevIcon.width = "18"
prevIcon.height = "18"

let nextIcon = document.createElement("img")
nextIcon.src = "../skin/img/tpl/new/chevron-right.svg"
nextIcon.width = "18"
nextIcon.height = "18"

bottomNavPrev.insertBefore(prevIcon, bottomNavPrev.firstChild)

bottomNavNext.appendChild(nextIcon)
// bottomNavNext.insertBefore(nextIcon, bottomNavNext.firstChild)

/* --- Saves the current Zen mode in the browser's cookies --- */

// It's the URL, with "LStemplateZen" at the end, and it's dynamic
// const cookieZenKey = Object.keys(window.localStorage)[0]

// Returns true or false. False by default (generated by TplMgr.js)
// let cookieZenValue = Object.values(window.localStorage.)[0]

// function getZenMode() {
// 	return window.localStorage.getItem(cookieZenKey)
// }

// function toggleZenMode() {
// 	window.localStorage.setItem(cookieZenKey, String(!Boolean(getZenMode())))
// }

// const toolsUl = document.querySelector(".default #tools ul")

// const hamburgerCollapseLi = document.createElement("li")
// hamburgerCollapseLi.classList.add("hamburger-li")

// const hamburgerCollapseDiv = document.createElement("div")
// hamburgerCollapseDiv.classList.add("hamburger-div")

// hamburgerCollapseLi.appendChild(hamburgerCollapseDiv)

// toolsUl.appendChild(hamburgerCollapseLi)

// const sidebarEl = document.querySelector(".default #toolbox")

// function addZenClass() {
// 	document.querySelector(".default #root").classList.add("zen-true")
// }

// toggleZenClass()

// hamburgerCollapseLi.addEventListener("click", (e) => {

// 	console.log("clicked collapse icon")
// 	sidebarEl.classList.toggle("collapsed")

// 	hamburgerCollapseDiv.classList.toggle("collapsed")


// 	toggleZenMode()
// })

// Test non concluant des cookies au chargement de la page
// window.onload = function () {
// 	const isZenMode = Boolean(getZenMode())
// 	console.log(isZenMode)
// 	if (isZenMode) {
// 			addZenClass()
// 			sidebarEl.classList.add("collapsed")
// 			sidebarEl.style = "transition: none;"
// 			hamburgerCollapseDiv.classList.add("collapsed")
// 	} else {
// 		document.querySelector(".default #root").classList.remove("zen-true")
// 		sidebarEl.classList.remove("collapsed")
// 		// sidebarEl.style = "transition: none;"
// 		hamburgerCollapseDiv.classList.remove("collapsed")
// 	}
// }